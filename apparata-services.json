{"formatVersion":"1.0","generatedAt":"2021-12-30T20:42:13Z","generatedBy":{"name":"Martin Johannesson"},"keywords":["apparata"],"name":"Apparata Network / Services Packages","overview":"This collection contains Apparata's open source network and services packages.","packages":[{"keywords":["ios","macos","swift","swift-package-manager"],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/Approach/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/Approach/master/README.md","summary":"Approach is a small Swift framework for client/server message passing between apps over the network.","url":"https://github.com/apparata/Approach.git","versions":[{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"macos","version":"10.14"},{"name":"ios","version":"12.0"},{"name":"tvos","version":"12.0"}],"packageName":"Approach","products":[{"name":"Approach","targets":["Approach"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Approach","name":"Approach"}],"toolsVersion":"5.1.0"}},"summary":"","version":"0.4.6"},{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"macos","version":"10.14"},{"name":"ios","version":"12.0"},{"name":"tvos","version":"12.0"}],"packageName":"Approach","products":[{"name":"Approach","targets":["Approach"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Approach","name":"Approach"}],"toolsVersion":"5.1.0"}},"summary":"","version":"0.4.5"},{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"macos","version":"10.14"},{"name":"ios","version":"12.0"},{"name":"tvos","version":"12.0"}],"packageName":"Approach","products":[{"name":"Approach","targets":["Approach"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Approach","name":"Approach"}],"toolsVersion":"5.1.0"}},"summary":"","version":"0.4.4"}]},{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/AppStoreKit/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/AppStoreKit/master/README.md","summary":"Swift package for using the App Store Connect API.","url":"https://github.com/apparata/AppStoreKit.git","versions":[{"defaultToolsVersion":"5.2.0","manifests":{"5.2.0":{"minimumPlatformVersions":[{"name":"macos","version":"10.15"}],"packageName":"AppStoreKit","products":[{"name":"AppStoreKit","targets":["AppStoreKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"AppStoreKit","name":"AppStoreKit"}],"toolsVersion":"5.2.0"}},"summary":"","version":"0.1.0"}]},{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/MessagePackKit/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/MessagePackKit/master/README.md","summary":"Swift MessagePack encoder based on the \"FlightSchool\" book code.","url":"https://github.com/apparata/MessagePackKit.git","versions":[{"defaultToolsVersion":"5.4.0","manifests":{"5.4.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"MessagePackKit","products":[{"name":"MessagePackKit","targets":["MessagePackKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"MessagePackKit","name":"MessagePackKit"}],"toolsVersion":"5.4.0"}},"summary":"","version":"1.1.0"},{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"MessagePackKit","products":[{"name":"MessagePackKit","targets":["MessagePackKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"MessagePackKit","name":"MessagePackKit"}],"toolsVersion":"5.1.0"}},"summary":"","version":"1.0.0"}]},{"keywords":[],"license":{"name":"NOASSERTION","url":"https://raw.githubusercontent.com/apparata/NetAppKit/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/NetAppKit/master/README.md","summary":"Framework for making simple Express-like net apps using Swift NIO.","url":"https://github.com/apparata/NetAppKit.git","versions":[{"defaultToolsVersion":"5.5.0","manifests":{"5.5.0":{"minimumPlatformVersions":[{"name":"macos","version":"12.0"}],"packageName":"NetAppKit","products":[{"name":"NetAppKit","targets":["NetAppKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"NetAppKit","name":"NetAppKit"}],"toolsVersion":"5.5.0"}},"summary":"","version":"0.5.0"},{"defaultToolsVersion":"5.4.0","manifests":{"5.4.0":{"minimumPlatformVersions":[{"name":"macos","version":"10.14"}],"packageName":"NetAppKit","products":[{"name":"NetAppKit","targets":["NetAppKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"NetAppKit","name":"NetAppKit"}],"toolsVersion":"5.4.0"}},"summary":"","version":"0.4.0"},{"defaultToolsVersion":"5.3.0","manifests":{"5.3.0":{"minimumPlatformVersions":[{"name":"macos","version":"10.14"}],"packageName":"NetAppKit","products":[{"name":"NetAppKit","targets":["NetAppKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"NetAppKit","name":"NetAppKit"}],"toolsVersion":"5.3.0"}},"summary":"","version":"0.3.0"}]}],"signature":{"certificate":{"issuer":{"commonName":"Apple Worldwide Developer Relations Certification Authority","organization":"Apple Inc.","organizationalUnit":"G3"},"subject":{"commonName":"Swift Package Collection: Apparata AB","organization":"Apparata AB","organizationalUnit":"DR5YAK7GKS","userID":"DR5YAK7GKS"}},"signature":"ewogICJhbGciIDogIlJTMjU2IiwKICAieDVjIiA6IFsKICAgICJNSUlGZHpDQ0JGK2dBd0lCQWdJUVNBTnFZTmYzTjNhYkVLby9TaXoraURBTkJna3Foa2lHOXcwQkFRc0ZBREIxTVVRd1FnWURWUVFERER0QmNIQnNaU0JYYjNKc1pIZHBaR1VnUkdWMlpXeHZjR1Z5SUZKbGJHRjBhVzl1Y3lCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVMTUFrR0ExVUVDd3dDUnpNeEV6QVJCZ05WQkFvTUNrRndjR3hsSUVsdVl5NHhDekFKQmdOVkJBWVRBbFZUTUI0WERUSXhNRGt5T1RFNE5UQXdNVm9YRFRJeU1Ea3lPVEU0TlRBd01Gb3dnWVF4R2pBWUJnb0praWFKay9Jc1pBRUJEQXBFVWpWWlFVczNSMHRUTVM0d0xBWURWUVFERENWVGQybG1kQ0JRWVdOcllXZGxJRU52Ykd4bFkzUnBiMjQ2SUVGd2NHRnlZWFJoSUVGQ01STXdFUVlEVlFRTERBcEVValZaUVVzM1IwdFRNUlF3RWdZRFZRUUtEQXRCY0hCaGNtRjBZU0JCUWpFTE1Ba0dBMVVFQmhNQ1UwVXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFESFcwTExZSFFhaERkN1dTS0F4U05JSnZkckk2UWc5NTcrNTBNU0RCV2RscTloRzVwNzVCbE9WdCtDYlEwQXBzTy9tNlNpV2xZOWo1K3pxdVhTS3I5azFzMmtRc3Z4MW1uSjJMTFI1aTlwdHF2ZDBIVlZZeXFkUFUyUnZHcWhUa2JmMmtCbE50dGViMSt3Q29jKzZTb2UwQXFRajIxbndJZFNPR1lBRjRpdFZPUzlpYXRIWHFOaVJyM3hMN3NwakdscnVDcmtGbnZicHZTRmhTZHVMNmxTVW9WcW9NaC8xck9Lcko2S3FMNU12dFBLWVVaUCtwbm1Za2xkSlZCa1RwVlF4SFhWMVFCRzFKNVZZa3JwOHZMMkpTdlVtdFZuZUpLcU5mdzlHM2VUY2cycUxnRkR1eURBbG1hbUd6MzBoN2NLUEJhY0dYTkhSbUtoNlBieGZUMWZBZ01CQUFHamdnSHhNSUlCN1RBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRkFuK3dCV1ErYTlrQ3BJU3VTWW9Zd3lYN0tleU1FRUdDQ3NHQVFVRkJ3RUJCRFV3TXpBeEJnZ3JCZ0VGQlFjd0FZWWxhSFIwY0RvdkwyOWpjM0F1WVhCd2JHVXVZMjl0TDI5amMzQXdNeTEzZDJSeVp6TXhPVENDQVI0R0ExVWRJQVNDQVJVd2dnRVJNSUlCRFFZSktvWklodmRqWkFVQk1JSC9NSUhEQmdnckJnRUZCUWNDQWpDQnRneUJzMUpsYkdsaGJtTmxJRzl1SUhSb2FYTWdZMlZ5ZEdsbWFXTmhkR1VnWW5rZ1lXNTVJSEJoY25SNUlHRnpjM1Z0WlhNZ1lXTmpaWEIwWVc1alpTQnZaaUIwYUdVZ2RHaGxiaUJoY0hCc2FXTmhZbXhsSUhOMFlXNWtZWEprSUhSbGNtMXpJR0Z1WkNCamIyNWthWFJwYjI1eklHOW1JSFZ6WlN3Z1kyVnlkR2xtYVdOaGRHVWdjRzlzYVdONUlHRnVaQ0JqWlhKMGFXWnBZMkYwYVc5dUlIQnlZV04wYVdObElITjBZWFJsYldWdWRITXVNRGNHQ0NzR0FRVUZCd0lCRml0b2RIUndjem92TDNkM2R5NWhjSEJzWlM1amIyMHZZMlZ5ZEdsbWFXTmhkR1ZoZFhSb2IzSnBkSGt2TUJZR0ExVWRKUUVCL3dRTU1Bb0dDQ3NHQVFVRkJ3TURNQjBHQTFVZERnUVdCQlRFZGd5c0JadUsyUnM5eHBNRloxRDQxTFowUGpBT0JnTlZIUThCQWY4RUJBTUNCNEF3RUFZS0tvWklodmRqWkFZQkl3UUNCUUF3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUM2Sk1hTGpESHNqZUZ2QmZJaUpQcUl5L05HSnB1L0RyOWp6UmVyZmN1c3NjeEZDYzNiSlExR3dWVEJycXhFbk9XaHFhTmorOXIwZFNLSlJlYUI1elZ6RWVWc0MxTjNwRzZ0TEVnMitlTTBZak5ncGVLdnBHQzdEQUtUOFpPYnRta29yeWZRR3ZydlE3eEU3aEtFREtVZktKcVdpcHMrMUJvWHlJWVlvbUIxZVFFMFFaVThZcUpxK2JiOTkyaVdsQyt3ZGhUL0lnaUw3UUJsR1FvWWU4Y3dYOHliczZTUTFEVVNRMkZiaW9nZ0RsSjY4RHdSeXdRMHNOQmdyQnhCblJKanRHMFpsMGtYbnRab2hENkNUK2VzTUl0WUdvb20yWncxZkp3SS9Va2tKSG9IUmtOZTBlNlh2TWRDRmNmVlNrcVMyYmVkUWUzaXZ0bFZIL1NDdmNrbz0iCiAgXQp9..kwRjZgAGI59VQ4jN2cEBBXRXjUhCJXxY_TBsUyXiFYgoBYQRNlw3hRKu4HmB5kCb0z0WPEmDiztjXQwpiyQl0WhoFaiLgluuVTfCji8rmi7kaVLDbJNoQEIbjw8femPtfKw3hsY_UaDDPo4-1pQJOA-6L3lFVz8j5ulI_vqd8gIAsiMmfb0klhRMklFDs-6aug6KiCkTBEvWBo5ZvtVM5jtVDFbOHkC5Jjf09UTuIHEG2bFSLK-erO_Vw91E4olagUFkYqO_3c8uMSifDfbLkps8QrKFIQYzfpdTrhtHGZK2qiGYb5WAqZYl795KW_jJQCHcmvvVPK_dHywZS3yWag"}}