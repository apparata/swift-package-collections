{"formatVersion":"1.0","generatedAt":"2021-12-30T20:41:56Z","generatedBy":{"name":"Martin Johannesson"},"keywords":["apparata"],"name":"Apparata Media Packages","overview":"This collection contains Apparata's open source media packages.","packages":[{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/AutoComposerKit/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/AutoComposerKit/master/README.md","summary":"Lousy, incomplete Swift port of AutoTracker.py","url":"https://github.com/apparata/AutoComposerKit.git","versions":[{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"AutoComposerKit","products":[{"name":"AutoComposerKit","targets":["AutoComposerKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"AutoComposerKit","name":"AutoComposerKit"}],"toolsVersion":"5.1.0"}},"summary":"","version":"0.1.0"}]},{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/FrameRecorder/main/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/FrameRecorder/main/README.md","summary":"Swift package for writing a video file, frame by frame.","url":"https://github.com/apparata/FrameRecorder.git","versions":[{"defaultToolsVersion":"5.5.0","manifests":{"5.5.0":{"minimumPlatformVersions":[{"name":"ios","version":"15.0"},{"name":"macos","version":"12.0"}],"packageName":"FrameRecorder","products":[{"name":"FrameRecorder","targets":["FrameRecorder"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"FrameRecorder","name":"FrameRecorder"}],"toolsVersion":"5.5.0"}},"summary":"","version":"1.0.0"},{"defaultToolsVersion":"5.4.0","manifests":{"5.4.0":{"minimumPlatformVersions":[{"name":"ios","version":"14.0"},{"name":"macos","version":"11.0"}],"packageName":"FrameRecorder","products":[{"name":"FrameRecorder","targets":["FrameRecorder"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"FrameRecorder","name":"FrameRecorder"}],"toolsVersion":"5.4.0"}},"summary":"","version":"0.9.4"},{"defaultToolsVersion":"5.4.0","manifests":{"5.4.0":{"minimumPlatformVersions":[{"name":"ios","version":"14.0"},{"name":"macos","version":"11.0"}],"packageName":"FrameRecorder","products":[{"name":"FrameRecorder","targets":["FrameRecorder"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"FrameRecorder","name":"FrameRecorder"}],"toolsVersion":"5.4.0"}},"summary":"","version":"0.9.3"},{"defaultToolsVersion":"5.4.0","manifests":{"5.4.0":{"minimumPlatformVersions":[{"name":"ios","version":"14.0"},{"name":"macos","version":"11.0"}],"packageName":"FrameRecorder","products":[{"name":"FrameRecorder","targets":["FrameRecorder"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"FrameRecorder","name":"FrameRecorder"}],"toolsVersion":"5.4.0"}},"summary":"","version":"0.9.2"}]},{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/MIDISequencer/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/MIDISequencer/master/README.md","summary":"Simple MIDISequencer experiment in Swift.","url":"https://github.com/apparata/MIDISequencer.git","versions":[{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"MIDISequencer","products":[{"name":"MIDISequencer","targets":["MIDISequencer"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"MIDISequencer","name":"MIDISequencer"}],"toolsVersion":"5.1.0"}},"summary":"","version":"0.1.0"}]}],"signature":{"certificate":{"issuer":{"commonName":"Apple Worldwide Developer Relations Certification Authority","organization":"Apple Inc.","organizationalUnit":"G3"},"subject":{"commonName":"Swift Package Collection: Apparata AB","organization":"Apparata AB","organizationalUnit":"DR5YAK7GKS","userID":"DR5YAK7GKS"}},"signature":"ewogICJhbGciIDogIlJTMjU2IiwKICAieDVjIiA6IFsKICAgICJNSUlGZHpDQ0JGK2dBd0lCQWdJUVNBTnFZTmYzTjNhYkVLby9TaXoraURBTkJna3Foa2lHOXcwQkFRc0ZBREIxTVVRd1FnWURWUVFERER0QmNIQnNaU0JYYjNKc1pIZHBaR1VnUkdWMlpXeHZjR1Z5SUZKbGJHRjBhVzl1Y3lCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVMTUFrR0ExVUVDd3dDUnpNeEV6QVJCZ05WQkFvTUNrRndjR3hsSUVsdVl5NHhDekFKQmdOVkJBWVRBbFZUTUI0WERUSXhNRGt5T1RFNE5UQXdNVm9YRFRJeU1Ea3lPVEU0TlRBd01Gb3dnWVF4R2pBWUJnb0praWFKay9Jc1pBRUJEQXBFVWpWWlFVczNSMHRUTVM0d0xBWURWUVFERENWVGQybG1kQ0JRWVdOcllXZGxJRU52Ykd4bFkzUnBiMjQ2SUVGd2NHRnlZWFJoSUVGQ01STXdFUVlEVlFRTERBcEVValZaUVVzM1IwdFRNUlF3RWdZRFZRUUtEQXRCY0hCaGNtRjBZU0JCUWpFTE1Ba0dBMVVFQmhNQ1UwVXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFESFcwTExZSFFhaERkN1dTS0F4U05JSnZkckk2UWc5NTcrNTBNU0RCV2RscTloRzVwNzVCbE9WdCtDYlEwQXBzTy9tNlNpV2xZOWo1K3pxdVhTS3I5azFzMmtRc3Z4MW1uSjJMTFI1aTlwdHF2ZDBIVlZZeXFkUFUyUnZHcWhUa2JmMmtCbE50dGViMSt3Q29jKzZTb2UwQXFRajIxbndJZFNPR1lBRjRpdFZPUzlpYXRIWHFOaVJyM3hMN3NwakdscnVDcmtGbnZicHZTRmhTZHVMNmxTVW9WcW9NaC8xck9Lcko2S3FMNU12dFBLWVVaUCtwbm1Za2xkSlZCa1RwVlF4SFhWMVFCRzFKNVZZa3JwOHZMMkpTdlVtdFZuZUpLcU5mdzlHM2VUY2cycUxnRkR1eURBbG1hbUd6MzBoN2NLUEJhY0dYTkhSbUtoNlBieGZUMWZBZ01CQUFHamdnSHhNSUlCN1RBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRkFuK3dCV1ErYTlrQ3BJU3VTWW9Zd3lYN0tleU1FRUdDQ3NHQVFVRkJ3RUJCRFV3TXpBeEJnZ3JCZ0VGQlFjd0FZWWxhSFIwY0RvdkwyOWpjM0F1WVhCd2JHVXVZMjl0TDI5amMzQXdNeTEzZDJSeVp6TXhPVENDQVI0R0ExVWRJQVNDQVJVd2dnRVJNSUlCRFFZSktvWklodmRqWkFVQk1JSC9NSUhEQmdnckJnRUZCUWNDQWpDQnRneUJzMUpsYkdsaGJtTmxJRzl1SUhSb2FYTWdZMlZ5ZEdsbWFXTmhkR1VnWW5rZ1lXNTVJSEJoY25SNUlHRnpjM1Z0WlhNZ1lXTmpaWEIwWVc1alpTQnZaaUIwYUdVZ2RHaGxiaUJoY0hCc2FXTmhZbXhsSUhOMFlXNWtZWEprSUhSbGNtMXpJR0Z1WkNCamIyNWthWFJwYjI1eklHOW1JSFZ6WlN3Z1kyVnlkR2xtYVdOaGRHVWdjRzlzYVdONUlHRnVaQ0JqWlhKMGFXWnBZMkYwYVc5dUlIQnlZV04wYVdObElITjBZWFJsYldWdWRITXVNRGNHQ0NzR0FRVUZCd0lCRml0b2RIUndjem92TDNkM2R5NWhjSEJzWlM1amIyMHZZMlZ5ZEdsbWFXTmhkR1ZoZFhSb2IzSnBkSGt2TUJZR0ExVWRKUUVCL3dRTU1Bb0dDQ3NHQVFVRkJ3TURNQjBHQTFVZERnUVdCQlRFZGd5c0JadUsyUnM5eHBNRloxRDQxTFowUGpBT0JnTlZIUThCQWY4RUJBTUNCNEF3RUFZS0tvWklodmRqWkFZQkl3UUNCUUF3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUM2Sk1hTGpESHNqZUZ2QmZJaUpQcUl5L05HSnB1L0RyOWp6UmVyZmN1c3NjeEZDYzNiSlExR3dWVEJycXhFbk9XaHFhTmorOXIwZFNLSlJlYUI1elZ6RWVWc0MxTjNwRzZ0TEVnMitlTTBZak5ncGVLdnBHQzdEQUtUOFpPYnRta29yeWZRR3ZydlE3eEU3aEtFREtVZktKcVdpcHMrMUJvWHlJWVlvbUIxZVFFMFFaVThZcUpxK2JiOTkyaVdsQyt3ZGhUL0lnaUw3UUJsR1FvWWU4Y3dYOHliczZTUTFEVVNRMkZiaW9nZ0RsSjY4RHdSeXdRMHNOQmdyQnhCblJKanRHMFpsMGtYbnRab2hENkNUK2VzTUl0WUdvb20yWncxZkp3SS9Va2tKSG9IUmtOZTBlNlh2TWRDRmNmVlNrcVMyYmVkUWUzaXZ0bFZIL1NDdmNrbz0iCiAgXQp9..r376dF-SdnGeTzH9HnMuHUH23Gf2XFHOdXTK7lxoRriJQgtgEVNkyf1a_E7SOtjOpwjOKRf3bRri9yAI5v_pExEs3hhu29EvWwdm2KT1DWrXdPIH3Qd0F1WN0FrMe2VHVX_fElygXB4wwHCipawL2d5y7uISNm4zIJBL8wpGzDA8yrRLBaKKDb4BPtvhJlgcgI7jn_odFQ8HrL3tMqEVYcSrODotJrSke6-tMA037741e2Fd6mZVaiNNHiELvCtmBg4UmwxMyPMlCLPsRQEbVxpmprToWVerRCXZpWo5BLDAzTPbftOS3be2D7uJSNN3-HLkw3-isgu4uWRT4tYJPw"}}