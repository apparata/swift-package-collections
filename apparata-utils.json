{"formatVersion":"1.0","generatedAt":"2021-07-07T15:14:54Z","generatedBy":{"name":"Martin Johannesson"},"keywords":["apparata"],"name":"Apparata Utility Packages","overview":"This collection contains Apparata's open source utility packages.","packages":[{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/BinaryDataKit/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/BinaryDataKit/master/README.md","summary":"Swift toolkit for working with binary data.","url":"https://github.com/apparata/BinaryDataKit.git","versions":[{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"BinaryDataKit","products":[{"name":"BinaryDataKit","targets":["BinaryDataKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"BinaryDataKit","name":"BinaryDataKit"}],"toolsVersion":"5.1.0"}},"summary":"","version":"1.0.2"},{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"BinaryDataKit","products":[{"name":"BinaryDataKit","targets":["BinaryDataKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"BinaryDataKit","name":"BinaryDataKit"}],"toolsVersion":"5.1.0"}},"summary":"","version":"1.0.1"},{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"BinaryDataKit","products":[{"name":"BinaryDataKit","targets":["BinaryDataKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"BinaryDataKit","name":"BinaryDataKit"}],"toolsVersion":"5.1.0"}},"summary":"","version":"1.0.0"}]},{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/CollectionKit/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/CollectionKit/master/README.md","summary":"Custom Swift collections and extensions.","url":"https://github.com/apparata/CollectionKit.git","versions":[{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"CollectionKit","products":[{"name":"CollectionKit","targets":["CollectionKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"CollectionKit","name":"CollectionKit"}],"toolsVersion":"5.1.0"}},"summary":"","version":"0.1.7"},{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"CollectionKit","products":[{"name":"CollectionKit","targets":["CollectionKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"CollectionKit","name":"CollectionKit"}],"toolsVersion":"5.1.0"}},"summary":"","version":"0.1.6"},{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"CollectionKit","products":[{"name":"CollectionKit","targets":["CollectionKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"CollectionKit","name":"CollectionKit"}],"toolsVersion":"5.1.0"}},"summary":"","version":"0.1.5"}]},{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/Componentized/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/Componentized/master/README.md","summary":"Swift experiment with composition based components.","url":"https://github.com/apparata/Componentized.git","versions":[{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"Componentized","products":[{"name":"Componentized","targets":["Componentized"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Componentized","name":"Componentized"}],"toolsVersion":"5.1.0"}},"summary":"","version":"0.1.0"}]},{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/Constructs/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/Constructs/master/README.md","summary":"Various convenient Swift code constructs. Some are experimental.","url":"https://github.com/apparata/Constructs.git","versions":[{"defaultToolsVersion":"5.2.0","manifests":{"5.2.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"Constructs","products":[{"name":"Constructs","targets":["Constructs"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Constructs","name":"Constructs"}],"toolsVersion":"5.2.0"}},"summary":"","version":"1.1.6"},{"defaultToolsVersion":"5.2.0","manifests":{"5.2.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"Constructs","products":[{"name":"Constructs","targets":["Constructs"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Constructs","name":"Constructs"}],"toolsVersion":"5.2.0"}},"summary":"","version":"1.1.5"},{"defaultToolsVersion":"5.2.0","manifests":{"5.2.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"Constructs","products":[{"name":"Constructs","targets":["Constructs"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Constructs","name":"Constructs"}],"toolsVersion":"5.2.0"}},"summary":"","version":"1.1.4"}]},{"keywords":[],"license":{"name":"Unlicense","url":"https://raw.githubusercontent.com/apparata/MathKit/master/UNLICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/MathKit/master/README.md","summary":"Some basic Swift math utilities.","url":"https://github.com/apparata/MathKit.git","versions":[{"defaultToolsVersion":"5.3.0","manifests":{"5.3.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"MathKit","products":[{"name":"MathKit","targets":["MathKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"MathKit","name":"MathKit"}],"toolsVersion":"5.3.0"}},"summary":"","version":"1.0.2"},{"defaultToolsVersion":"5.3.0","manifests":{"5.3.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"MathKit","products":[{"name":"MathKit","targets":["MathKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"MathKit","name":"MathKit"}],"toolsVersion":"5.3.0"}},"summary":"","version":"1.0.1"},{"defaultToolsVersion":"5.2.0","manifests":{"5.2.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"MathKit","products":[{"name":"MathKit","targets":["MathKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"MathKit","name":"MathKit"}],"toolsVersion":"5.2.0"}},"summary":"","version":"1.0.0"}]},{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/NodeGraph/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/NodeGraph/master/README.md","summary":"Swift data structure for node graph based apps.","url":"https://github.com/apparata/NodeGraph.git","versions":[{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"NodeGraph","products":[{"name":"NodeGraph","targets":["NodeGraph"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"NodeGraph","name":"NodeGraph"}],"toolsVersion":"5.1.0"}},"version":"0.1.0"}]},{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/RuleKit/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/RuleKit/master/README.md","summary":"RuleKit is a small framework for creating predicate rules that can be evaluated and used to e.g. filter arrays in a data driven way, without adding explicit if or switch statements to the code.","url":"https://github.com/apparata/RuleKit.git","versions":[{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"macos","version":"10.14"},{"name":"ios","version":"12.0"},{"name":"tvos","version":"12.0"}],"packageName":"RuleKit","products":[{"name":"RuleKit","targets":["RuleKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"RuleKit","name":"RuleKit"}],"toolsVersion":"5.1.0"}},"summary":"","version":"1.0.1"},{"defaultToolsVersion":"5.0.0","manifests":{"5.0.0":{"minimumPlatformVersions":[{"name":"macos","version":"10.14"},{"name":"ios","version":"12.0"},{"name":"tvos","version":"12.0"}],"packageName":"RuleKit","products":[{"name":"RuleKit","targets":["RuleKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"RuleKit","name":"RuleKit"}],"toolsVersion":"5.0.0"}},"summary":"","version":"1.0.0"}]},{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/SequenceKit/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/SequenceKit/master/README.md","summary":"SequenceKit provides a number of composable, numeric Swift sequences.","url":"https://github.com/apparata/SequenceKit.git","versions":[{"defaultToolsVersion":"5.2.0","manifests":{"5.2.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"SequenceKit","products":[{"name":"SequenceKit","targets":["SequenceKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"SequenceKit","name":"SequenceKit"}],"toolsVersion":"5.2.0"}},"summary":"","version":"1.0.0"}]},{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/TemplateKit/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/TemplateKit/master/README.md","summary":"A simple templating library written in Swift.","url":"https://github.com/apparata/TemplateKit.git","versions":[{"defaultToolsVersion":"5.2.0","manifests":{"5.2.0":{"minimumPlatformVersions":[{"name":"macos","version":"10.15"},{"name":"ios","version":"13.0"}],"packageName":"TemplateKit","products":[{"name":"TemplateKit","targets":["TemplateKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"TemplateKit","name":"TemplateKit"}],"toolsVersion":"5.2.0"}},"summary":"","version":"0.5.0"},{"defaultToolsVersion":"5.2.0","manifests":{"5.2.0":{"minimumPlatformVersions":[{"name":"macos","version":"10.15"},{"name":"ios","version":"13.0"}],"packageName":"TemplateKit","products":[{"name":"TemplateKit","targets":["TemplateKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"TemplateKit","name":"TemplateKit"}],"toolsVersion":"5.2.0"}},"summary":"","version":"0.4.9"},{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"macos","version":"10.15"},{"name":"ios","version":"13.0"}],"packageName":"TemplateKit","products":[{"name":"TemplateKit","targets":["TemplateKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"TemplateKit","name":"TemplateKit"}],"toolsVersion":"5.1.0"}},"summary":"","version":"0.4.8"}]},{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/TextSearchKit/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/TextSearchKit/master/README.md","summary":"Simple wrapper for using SearchKit with Swift.","url":"https://github.com/apparata/TextSearchKit.git","versions":[{"defaultToolsVersion":"5.2.0","manifests":{"5.2.0":{"minimumPlatformVersions":[{"name":"macos","version":"10.15"}],"packageName":"TextSearchKit","products":[{"name":"TextSearchKit","targets":["TextSearchKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"TextSearchKit","name":"TextSearchKit"}],"toolsVersion":"5.2.0"}},"summary":"","version":"0.1.0"}]},{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/TextToolbox/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/TextToolbox/master/README.md","summary":"Various Swift string utilities.","url":"https://github.com/apparata/TextToolbox.git","versions":[{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"TextToolbox","products":[{"name":"TextToolbox","targets":["TextToolbox"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"TextToolbox","name":"TextToolbox"}],"toolsVersion":"5.1.0"}},"summary":"","version":"1.0.1"},{"defaultToolsVersion":"5.1.0","manifests":{"5.1.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"TextToolbox","products":[{"name":"TextToolbox","targets":["TextToolbox"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"TextToolbox","name":"TextToolbox"}],"toolsVersion":"5.1.0"}},"summary":"","version":"1.0.0"}]}],"signature":{"certificate":{"issuer":{"commonName":"Apple Worldwide Developer Relations Certification Authority","organization":"Apple Inc.","organizationalUnit":"G3"},"subject":{"commonName":"Swift Package Collection: Apparata AB","organization":"Apparata AB","organizationalUnit":"DR5YAK7GKS","userID":"DR5YAK7GKS"}},"signature":"ewogICJhbGciIDogIlJTMjU2IiwKICAieDVjIiA6IFsKICAgICJNSUlGZHpDQ0JGK2dBd0lCQWdJUVNBTnFZTmYzTjNhYkVLby9TaXoraURBTkJna3Foa2lHOXcwQkFRc0ZBREIxTVVRd1FnWURWUVFERER0QmNIQnNaU0JYYjNKc1pIZHBaR1VnUkdWMlpXeHZjR1Z5SUZKbGJHRjBhVzl1Y3lCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVMTUFrR0ExVUVDd3dDUnpNeEV6QVJCZ05WQkFvTUNrRndjR3hsSUVsdVl5NHhDekFKQmdOVkJBWVRBbFZUTUI0WERUSXhNRGt5T1RFNE5UQXdNVm9YRFRJeU1Ea3lPVEU0TlRBd01Gb3dnWVF4R2pBWUJnb0praWFKay9Jc1pBRUJEQXBFVWpWWlFVczNSMHRUTVM0d0xBWURWUVFERENWVGQybG1kQ0JRWVdOcllXZGxJRU52Ykd4bFkzUnBiMjQ2SUVGd2NHRnlZWFJoSUVGQ01STXdFUVlEVlFRTERBcEVValZaUVVzM1IwdFRNUlF3RWdZRFZRUUtEQXRCY0hCaGNtRjBZU0JCUWpFTE1Ba0dBMVVFQmhNQ1UwVXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFESFcwTExZSFFhaERkN1dTS0F4U05JSnZkckk2UWc5NTcrNTBNU0RCV2RscTloRzVwNzVCbE9WdCtDYlEwQXBzTy9tNlNpV2xZOWo1K3pxdVhTS3I5azFzMmtRc3Z4MW1uSjJMTFI1aTlwdHF2ZDBIVlZZeXFkUFUyUnZHcWhUa2JmMmtCbE50dGViMSt3Q29jKzZTb2UwQXFRajIxbndJZFNPR1lBRjRpdFZPUzlpYXRIWHFOaVJyM3hMN3NwakdscnVDcmtGbnZicHZTRmhTZHVMNmxTVW9WcW9NaC8xck9Lcko2S3FMNU12dFBLWVVaUCtwbm1Za2xkSlZCa1RwVlF4SFhWMVFCRzFKNVZZa3JwOHZMMkpTdlVtdFZuZUpLcU5mdzlHM2VUY2cycUxnRkR1eURBbG1hbUd6MzBoN2NLUEJhY0dYTkhSbUtoNlBieGZUMWZBZ01CQUFHamdnSHhNSUlCN1RBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRkFuK3dCV1ErYTlrQ3BJU3VTWW9Zd3lYN0tleU1FRUdDQ3NHQVFVRkJ3RUJCRFV3TXpBeEJnZ3JCZ0VGQlFjd0FZWWxhSFIwY0RvdkwyOWpjM0F1WVhCd2JHVXVZMjl0TDI5amMzQXdNeTEzZDJSeVp6TXhPVENDQVI0R0ExVWRJQVNDQVJVd2dnRVJNSUlCRFFZSktvWklodmRqWkFVQk1JSC9NSUhEQmdnckJnRUZCUWNDQWpDQnRneUJzMUpsYkdsaGJtTmxJRzl1SUhSb2FYTWdZMlZ5ZEdsbWFXTmhkR1VnWW5rZ1lXNTVJSEJoY25SNUlHRnpjM1Z0WlhNZ1lXTmpaWEIwWVc1alpTQnZaaUIwYUdVZ2RHaGxiaUJoY0hCc2FXTmhZbXhsSUhOMFlXNWtZWEprSUhSbGNtMXpJR0Z1WkNCamIyNWthWFJwYjI1eklHOW1JSFZ6WlN3Z1kyVnlkR2xtYVdOaGRHVWdjRzlzYVdONUlHRnVaQ0JqWlhKMGFXWnBZMkYwYVc5dUlIQnlZV04wYVdObElITjBZWFJsYldWdWRITXVNRGNHQ0NzR0FRVUZCd0lCRml0b2RIUndjem92TDNkM2R5NWhjSEJzWlM1amIyMHZZMlZ5ZEdsbWFXTmhkR1ZoZFhSb2IzSnBkSGt2TUJZR0ExVWRKUUVCL3dRTU1Bb0dDQ3NHQVFVRkJ3TURNQjBHQTFVZERnUVdCQlRFZGd5c0JadUsyUnM5eHBNRloxRDQxTFowUGpBT0JnTlZIUThCQWY4RUJBTUNCNEF3RUFZS0tvWklodmRqWkFZQkl3UUNCUUF3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUM2Sk1hTGpESHNqZUZ2QmZJaUpQcUl5L05HSnB1L0RyOWp6UmVyZmN1c3NjeEZDYzNiSlExR3dWVEJycXhFbk9XaHFhTmorOXIwZFNLSlJlYUI1elZ6RWVWc0MxTjNwRzZ0TEVnMitlTTBZak5ncGVLdnBHQzdEQUtUOFpPYnRta29yeWZRR3ZydlE3eEU3aEtFREtVZktKcVdpcHMrMUJvWHlJWVlvbUIxZVFFMFFaVThZcUpxK2JiOTkyaVdsQyt3ZGhUL0lnaUw3UUJsR1FvWWU4Y3dYOHliczZTUTFEVVNRMkZiaW9nZ0RsSjY4RHdSeXdRMHNOQmdyQnhCblJKanRHMFpsMGtYbnRab2hENkNUK2VzTUl0WUdvb20yWncxZkp3SS9Va2tKSG9IUmtOZTBlNlh2TWRDRmNmVlNrcVMyYmVkUWUzaXZ0bFZIL1NDdmNrbz0iCiAgXQp9..v2iDBFvlJHPwaSue1ie6eZ22xprOeMGBxTEACog3BdPaLudfKQz3HOc6Tn9afxF7d9e08viSoXX7xonBdJMbUsiuYWXTX9D6VUi-O-cqnha45On6nrd_CBnwwoahuOPLnE0Ud1o-jLASQpAYZ1mnVcr3MMaQxK-3o7CqZ-Oz_OFzaHWK_vtJGXqMOzDlc51TydadDI6lJa-2gr0NQu4wmgPgUw0FQ61rubd6d_9JyN9kkJxuWFjzc-6M8lfp7P2rAU07hUFQsf63WBIjLRr8sq0lT40JTDodiYdjtazLtVRkpLt13_ktLV4krrqEbLaPDOvnnuySdQKNkWGfEAVMVw"}}