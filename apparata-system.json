{"formatVersion":"1.0","generatedAt":"2023-09-23T15:22:51Z","generatedBy":{"name":"Martin Johannesson"},"keywords":["apparata"],"name":"Apparata System Packages","overview":"This collection contains Apparata's open source system packages.","packages":[{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/ConcurrencyToolbox/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/ConcurrencyToolbox/master/README.md","summary":"Utilities to help out with concurrency in Swift.","url":"https://github.com/apparata/ConcurrencyToolbox.git","versions":[{"defaultToolsVersion":"5.3","manifests":{"5.3":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"ConcurrencyToolbox","products":[{"name":"ConcurrencyToolbox","targets":["ConcurrencyToolbox"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ConcurrencyToolbox","name":"ConcurrencyToolbox"}],"toolsVersion":"5.3"}},"summary":"","version":"0.0.2"},{"defaultToolsVersion":"5.2","manifests":{"5.2":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"ConcurrencyToolbox","products":[{"name":"ConcurrencyToolbox","targets":["ConcurrencyToolbox"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ConcurrencyToolbox","name":"ConcurrencyToolbox"}],"toolsVersion":"5.2"}},"summary":"","version":"0.0.1"}]},{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/ConsoleKit/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/ConsoleKit/master/README.md","summary":"Swift package that makes it easier to do REPLs and other console I/O","url":"https://github.com/apparata/ConsoleKit.git","versions":[{"defaultToolsVersion":"5.3","manifests":{"5.3":{"minimumPlatformVersions":[{"name":"macos","version":"10.14"}],"packageName":"ConsoleKit","products":[{"name":"ConsoleKit","targets":["ConsoleKit"],"type":{"library":["automatic"]}},{"name":"replexample","targets":["replexample"],"type":{"executable":null}}],"targets":[{"moduleName":"ConsoleKit","name":"ConsoleKit"},{"moduleName":"replexample","name":"replexample"}],"toolsVersion":"5.3"}},"summary":"","version":"0.2.1"},{"defaultToolsVersion":"5.3","manifests":{"5.3":{"minimumPlatformVersions":[{"name":"macos","version":"10.14"}],"packageName":"ConsoleKit","products":[{"name":"ConsoleKit","targets":["ConsoleKit"],"type":{"library":["automatic"]}},{"name":"replexample","targets":["replexample"],"type":{"executable":null}}],"targets":[{"moduleName":"ConsoleKit","name":"ConsoleKit"},{"moduleName":"replexample","name":"replexample"}],"toolsVersion":"5.3"}},"summary":"","version":"0.2.0"},{"defaultToolsVersion":"5.3","manifests":{"5.3":{"minimumPlatformVersions":[{"name":"macos","version":"10.14"}],"packageName":"ConsoleKit","products":[{"name":"ConsoleKit","targets":["ConsoleKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ConsoleKit","name":"ConsoleKit"}],"toolsVersion":"5.3"}},"summary":"","version":"0.1.0"}]},{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/ProjectKit/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/ProjectKit/master/README.md","summary":"ProjectKit is a macOS Swift framework for parsing Xcode project files.","url":"https://github.com/apparata/ProjectKit.git","versions":[{"defaultToolsVersion":"5.0","manifests":{"5.0":{"packageName":"ProjectKit","products":[{"name":"ProjectKit","targets":["ProjectKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ProjectKit","name":"ProjectKit"}],"toolsVersion":"5.0"}},"version":"0.4.0"},{"defaultToolsVersion":"4.2","manifests":{"4.2":{"packageName":"ProjectKit","products":[{"name":"ProjectKit","targets":["ProjectKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ProjectKit","name":"ProjectKit"}],"toolsVersion":"4.2"}},"version":"0.3.0"},{"defaultToolsVersion":"4.0","manifests":{"4.0":{"packageName":"ProjectKit","products":[{"name":"ProjectKit","targets":["ProjectKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"ProjectKit","name":"ProjectKit"}],"toolsVersion":"4.0"}},"summary":"","version":"0.2.0"}]},{"keywords":[],"license":{"name":"Unlicense","url":"https://raw.githubusercontent.com/apparata/SQLiteKit/master/UNLICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/SQLiteKit/master/README.md","summary":"Simple Swift wrapper for accessing a SQLite database in a thread safe manner. ","url":"https://github.com/apparata/SQLiteKit.git","versions":[{"defaultToolsVersion":"5.4","manifests":{"5.4":{"minimumPlatformVersions":[{"name":"macos","version":"10.14"},{"name":"ios","version":"12.0"},{"name":"tvos","version":"12.0"}],"packageName":"SQLiteKit","products":[{"name":"SQLiteKit","targets":["SQLiteKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"SQLiteKit","name":"SQLiteKit"}],"toolsVersion":"5.4"}},"summary":"","version":"1.0.0"},{"defaultToolsVersion":"5.4","manifests":{"5.4":{"minimumPlatformVersions":[{"name":"macos","version":"10.14"},{"name":"ios","version":"12.0"},{"name":"tvos","version":"12.0"}],"packageName":"SQLiteKit","products":[{"name":"SQLiteKit","targets":["SQLiteKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"SQLiteKit","name":"SQLiteKit"}],"toolsVersion":"5.4"}},"summary":"","version":"0.4.7"},{"defaultToolsVersion":"5.4","manifests":{"5.4":{"minimumPlatformVersions":[{"name":"macos","version":"10.14"},{"name":"ios","version":"12.0"},{"name":"tvos","version":"12.0"}],"packageName":"SQLiteKit","products":[{"name":"SQLiteKit","targets":["SQLiteKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"SQLiteKit","name":"SQLiteKit"}],"toolsVersion":"5.4"}},"summary":"","version":"0.4.6"},{"defaultToolsVersion":"5.4","manifests":{"5.4":{"minimumPlatformVersions":[{"name":"macos","version":"10.14"},{"name":"ios","version":"12.0"},{"name":"tvos","version":"12.0"}],"packageName":"SQLiteKit","products":[{"name":"SQLiteKit","targets":["SQLiteKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"SQLiteKit","name":"SQLiteKit"}],"toolsVersion":"5.4"}},"summary":"","version":"0.4.5"}]},{"keywords":[],"license":{"name":"Unlicense","url":"https://raw.githubusercontent.com/apparata/SQLizer/main/UNLICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/SQLizer/main/README.md","summary":"Swift wrapper for SQLite.","url":"https://github.com/apparata/SQLizer.git","versions":[{"defaultToolsVersion":"5.5","manifests":{"5.5":{"minimumPlatformVersions":[{"name":"ios","version":"15.0"},{"name":"macos","version":"12.0"}],"packageName":"SQLizer","products":[{"name":"SQLizer","targets":["SQLizer"],"type":{"library":["automatic"]}},{"name":"sqlize","targets":["sqlize"],"type":{"executable":null}}],"targets":[{"moduleName":"SQLizer","name":"SQLizer"},{"moduleName":"sqlize","name":"sqlize"}],"toolsVersion":"5.5"}},"summary":"","version":"v1.0.0"},{"defaultToolsVersion":"5.5","manifests":{"5.5":{"minimumPlatformVersions":[{"name":"ios","version":"15.0"},{"name":"macos","version":"12.0"}],"packageName":"SQLizer","products":[{"name":"SQLizer","targets":["SQLizer"],"type":{"library":["automatic"]}},{"name":"sqlize","targets":["sqlize"],"type":{"executable":null}}],"targets":[{"moduleName":"SQLizer","name":"SQLizer"},{"moduleName":"sqlize","name":"sqlize"}],"toolsVersion":"5.5"}},"summary":"","version":"v0.2.0"},{"defaultToolsVersion":"5.5","manifests":{"5.5":{"minimumPlatformVersions":[{"name":"ios","version":"15.0"},{"name":"macos","version":"12.0"}],"packageName":"SQLizer","products":[{"name":"SQLizer","targets":["SQLizer"],"type":{"library":["automatic"]}},{"name":"sqlize","targets":["sqlize"],"type":{"executable":null}}],"targets":[{"moduleName":"SQLizer","name":"SQLizer"},{"moduleName":"sqlize","name":"sqlize"}],"toolsVersion":"5.5"}},"summary":"","version":"v0.1.2"},{"defaultToolsVersion":"5.5","manifests":{"5.5":{"minimumPlatformVersions":[{"name":"ios","version":"15.0"},{"name":"macos","version":"12.0"}],"packageName":"SQLizer","products":[{"name":"SQLizer","targets":["SQLizer"],"type":{"library":["automatic"]}},{"name":"sqlize","targets":["sqlize"],"type":{"executable":null}}],"targets":[{"moduleName":"SQLizer","name":"SQLizer"},{"moduleName":"sqlize","name":"sqlize"}],"toolsVersion":"5.5"}},"summary":"","version":"v0.1.1"}]},{"keywords":[],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/apparata/SystemKit/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/SystemKit/master/README.md","summary":"File system and operating system utilities in Swift.","url":"https://github.com/apparata/SystemKit.git","versions":[{"defaultToolsVersion":"5.8","manifests":{"5.8":{"minimumPlatformVersions":[{"name":"ios","version":"15.0"},{"name":"macos","version":"12.0"},{"name":"tvos","version":"15.0"}],"packageName":"SystemKit","products":[{"name":"SystemKit","targets":["SystemKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"SystemKit","name":"SystemKit"}],"toolsVersion":"5.8"}},"summary":"","version":"1.6.0"},{"defaultToolsVersion":"5.2","manifests":{"5.2":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"SystemKit","products":[{"name":"SystemKit","targets":["SystemKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"SystemKit","name":"SystemKit"}],"toolsVersion":"5.2"}},"summary":"","version":"1.5.0"},{"defaultToolsVersion":"5.2","manifests":{"5.2":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"SystemKit","products":[{"name":"SystemKit","targets":["SystemKit"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"SystemKit","name":"SystemKit"}],"toolsVersion":"5.2"}},"summary":"","version":"1.4.1"}]},{"keywords":[],"license":{"name":"Unlicense","url":"https://raw.githubusercontent.com/apparata/Zipcode/master/UNLICENSE"},"readmeURL":"https://raw.githubusercontent.com/apparata/Zipcode/master/README.md","summary":"Zipcode is a simple Swift framework for reading and writing zip files.","url":"https://github.com/apparata/Zipcode.git","versions":[{"defaultToolsVersion":"5.4","manifests":{"5.4":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"Zipcode","products":[{"name":"Zipcode","targets":["Zipcode"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Zipcode","name":"Zipcode"}],"toolsVersion":"5.4"}},"summary":"","version":"0.2.0"},{"defaultToolsVersion":"5.1","manifests":{"5.1":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"},{"name":"tvos","version":"13.0"}],"packageName":"Zipcode","products":[{"name":"Zipcode","targets":["Zipcode"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"Zipcode","name":"Zipcode"}],"toolsVersion":"5.1"}},"summary":"","version":"0.1.0"}]}],"signature":{"certificate":{"issuer":{"commonName":"Apple Worldwide Developer Relations Certification Authority","organization":"Apple Inc.","organizationalUnit":"G3"},"subject":{"commonName":"Swift Package Collection: Apparata AB","organization":"Apparata AB","organizationalUnit":"DR5YAK7GKS","userID":"DR5YAK7GKS"}},"signature":"ewogICJhbGciIDogIlJTMjU2IiwKICAieDVjIiA6IFsKICAgICJNSUlGZHpDQ0JGK2dBd0lCQWdJUWFBS2ptNjgvd3BPdlRYWkFEVWRjTERBTkJna3Foa2lHOXcwQkFRc0ZBREIxTVVRd1FnWURWUVFERER0QmNIQnNaU0JYYjNKc1pIZHBaR1VnUkdWMlpXeHZjR1Z5SUZKbGJHRjBhVzl1Y3lCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVMTUFrR0ExVUVDd3dDUnpNeEV6QVJCZ05WQkFvTUNrRndjR3hsSUVsdVl5NHhDekFKQmdOVkJBWVRBbFZUTUI0WERUSXpNRGN6TURFek1qVXlOVm9YRFRJME1EY3lPVEV6TWpVeU5Gb3dnWVF4R2pBWUJnb0praWFKay9Jc1pBRUJEQXBFVWpWWlFVczNSMHRUTVM0d0xBWURWUVFERENWVGQybG1kQ0JRWVdOcllXZGxJRU52Ykd4bFkzUnBiMjQ2SUVGd2NHRnlZWFJoSUVGQ01STXdFUVlEVlFRTERBcEVValZaUVVzM1IwdFRNUlF3RWdZRFZRUUtEQXRCY0hCaGNtRjBZU0JCUWpFTE1Ba0dBMVVFQmhNQ1ZWTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDdSsxUFAyOElJOTVKcEN4bWVoaHlYNCsrQkZmbDhZWEppTGkveGxuWVdSQTl1Yk5CSmExaGdkL2xPZUhDTUdrRlVKYXN2cVhTK1p5UHViZytGSnA2TEJaem5vSWk1a1Zock5uY0djRU95amV1RTIyTi9ockhRTTVKZ0lnL3NKRkphcDFpU1RDUlgwek05TTA5c3pYWG1CWnFwSVQxb2NYMEZPYmppMlBHblZjMFFhQVFjOEVFc3MrRWZCNW1OQVZSZytaWmpQZEE0MWF1cG4ycG5ucDZSUlMyWDdDbTBUeXdNUVBDWTNJMkZ4dytzejdBd2VLaWtBR2E4NmZQTXBVaWFpdDVMS3NqTzA3alYxcklkMW5HT3l1ckE2U1JjTjFzakh4aFh5K2R3V1RPeTBVVGpPcGpUNXdjMjUveDNVQU8rTkRVRkNUSDczWWJCOE40SWc2R0hBZ01CQUFHamdnSHhNSUlCN1RBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRkFuK3dCV1ErYTlrQ3BJU3VTWW9Zd3lYN0tleU1FRUdDQ3NHQVFVRkJ3RUJCRFV3TXpBeEJnZ3JCZ0VGQlFjd0FZWWxhSFIwY0RvdkwyOWpjM0F1WVhCd2JHVXVZMjl0TDI5amMzQXdNeTEzZDJSeVp6TXhPVENDQVI0R0ExVWRJQVNDQVJVd2dnRVJNSUlCRFFZSktvWklodmRqWkFVQk1JSC9NSUhEQmdnckJnRUZCUWNDQWpDQnRneUJzMUpsYkdsaGJtTmxJRzl1SUhSb2FYTWdZMlZ5ZEdsbWFXTmhkR1VnWW5rZ1lXNTVJSEJoY25SNUlHRnpjM1Z0WlhNZ1lXTmpaWEIwWVc1alpTQnZaaUIwYUdVZ2RHaGxiaUJoY0hCc2FXTmhZbXhsSUhOMFlXNWtZWEprSUhSbGNtMXpJR0Z1WkNCamIyNWthWFJwYjI1eklHOW1JSFZ6WlN3Z1kyVnlkR2xtYVdOaGRHVWdjRzlzYVdONUlHRnVaQ0JqWlhKMGFXWnBZMkYwYVc5dUlIQnlZV04wYVdObElITjBZWFJsYldWdWRITXVNRGNHQ0NzR0FRVUZCd0lCRml0b2RIUndjem92TDNkM2R5NWhjSEJzWlM1amIyMHZZMlZ5ZEdsbWFXTmhkR1ZoZFhSb2IzSnBkSGt2TUJZR0ExVWRKUUVCL3dRTU1Bb0dDQ3NHQVFVRkJ3TURNQjBHQTFVZERnUVdCQlF1Z1VtQjk2UFJkYjR1UEc4eTZFeURxS3VmSXpBT0JnTlZIUThCQWY4RUJBTUNCNEF3RUFZS0tvWklodmRqWkFZQkl3UUNCUUF3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUsrK3VJNnZ0cUNpeCtTR09lWXFWRStZNzh5RXJMdnZuNDZaNyt2bG8wZ3JRdVJuWnVFUkQydnV1SW54N2FmMVlPUXF6elgvMFhnZFBsK3FqcDZOU09QcEh6RHE5UFBiSm4vR0xHdlpLc2lNOUp3N01jamtNa0FUcEdlMnZrdy9RZnZqVFdwY0lTaGdkMlVpZUgrVjBGT3RNdEVlcGJ5d2wwQ25KeHY3YVdxS0piaFNWMC85cWxUeWhYVURqN3dUNzQ4RmhWa0hpbDBmNWNQeGx3clZFV2FQMkdacy9NeGFLNkNGaHBLVUF5OWpkRjFVQWtYYndFR2N6aUI5aXBENFE2SXlFV3NCWGNSanQyYVl0MUs0cFF5U2ZhSUpWS3JqWGtkdlREYk9QcHRIQTduR25MZDNXd0xZdjBPWENSODVlMEM3eGN5ZlRza3RIaWJmWEpkREJqWT0iCiAgXQp9..YTWHa1rJkt18XNBBi2TtE9MIYsoz7quQsGSqcXvvcyvNAVECXhj7xNE8kau0hf2ZTxcYgzwueHdhhMI959lpZzhL6PlqH_O3wcsXDAQQVAf1xx2LTuCRXOHDr6xoem_Mwa0ph1Cu4HWyNx8COMTkVHbyTyJV1eX83f5qT6ivl0x-rS9cW9nVdH8xkM4Pz84cBWppiLNgjfmAaWyYaoh3KeVAsAMsv_OWaKXQrs1hXyLrAiMEyjFXXd82QOUbQ0MWVmvLECjuWGR4kuXy886fEFB6cHaa69711qkOhkYyj6T3GNy7oysxoiWyU-_SdBYA347ciOwiY77IXTWCsSRHfw"}}